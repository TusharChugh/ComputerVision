function det_res = multiscale_detect(image, template, ndet)
% input:
%     image - test image.
%     template - [16 x 16x 9] matrix.
%     ndet - the number of return values.
% output:
%      det_res - [ndet x 3] matrix
%                column one is the x coordinate
%                column two is the y coordinate
%                column three is the scale, i.e. 1, 0.7 or 0.49 ..

if nargin < 3
    image= im2double(rgb2gray(imread('../data/test1.jpg')));
    template = tl_pos;
    ndet = 1;
end

final_x = zeros(ndet,1);
final_y = zeros(ndet,1);
final_scale = zeros(ndet,1);
final_score = zeros(ndet,1);

scale = 0.7;
im_copy = image;
i = 0;

ndet_count = 0;

while (size(template,1) < size(im_copy,1) && size(template,2) < size(im_copy,2))
%     if ndet_count == ndet
%         break;
%     end
    [x,y,score] = detect(im_copy,template,ndet);
    x = floor(x ./(power(scale,i)));
    y = floor(y ./(power(scale,i)));
    
    is_not_close = true;
    for j = 1:ndet_count
        dist = pdist2([final_x(j), final_y(j)], [x, y]);
        if dist < 128
            is_not_close = false;
            break;
        end
    end
    
    if (is_not_close)
        ndet_count = ndet_count + 1;
        final_x = [final_x x];
        final_y = [final_y y];
        final_scale = power(scale,i);
        final_score = score;
    end
    
    i = i + 1;
    im_copy = imresize(image, (power(scale,i)));
    
end

[~, index] = sort(final_score, 'descend');

for i = 1:ndet
    if i > length(final_x)
        break;
    end
    det_res = [final_x(index(i)), final_y(index(i)), final_scale(index(i))];
end

end
